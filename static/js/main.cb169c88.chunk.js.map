{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","findUser","usersFromServer","find","preparedTodos","userId","userFound","App","useState","setTodos","setTitle","selectedUserId","setSelectedUserId","errorTitle","setErrorTitle","errorUser","setErrorUser","action","method","onSubmit","event","preventDefault","todoTitle","newTODO","Date","now","previousTODO","addNewTODO","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb169c88.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\n\nexport interface User {\n  id: number,\n  name: string,\n  email: string,\n}\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo, User } from '../UserInfo';\n\nexport interface Todo {\n  id: number,\n  userId: number,\n  title: string,\n  completed: boolean,\n  user: User | null,\n}\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n      data-id={id}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { User } from '../UserInfo';\n\nexport interface Todo {\n  id: number,\n  userId: number,\n  title: string,\n  completed: boolean,\n  user: User | null,\n}\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport React, { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './components/TodoInfo';\n\nfunction findUser(id: number) {\n  return usersFromServer.find(user => user.id === id) || null;\n}\n\nconst preparedTodos: Todo[] = todosFromServer.map(todo => {\n  const userFound = findUser(todo.userId);\n\n  return {\n    ...todo,\n    user: userFound || null,\n  };\n});\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(preparedTodos);\n  const [title, setTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [errorTitle, setErrorTitle] = useState(false);\n  const [errorUser, setErrorUser] = useState(false);\n\n  const addNewTODO = (todoTitle: string, userId: number) => {\n    const newTODO: Todo = {\n      id: Date.now(),\n      title: todoTitle,\n      userId,\n      completed: false,\n      user: findUser(selectedUserId),\n    };\n\n    setTodos((previousTODO) => [...previousTODO, newTODO]);\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (title && selectedUserId) {\n      addNewTODO(title, selectedUserId);\n      setTitle('');\n      setSelectedUserId(0);\n    }\n\n    setErrorTitle(!title);\n    setErrorUser(!selectedUserId);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter a title\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={event => setTitle(event.target.value)}\n          />\n          {errorTitle\n          && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={event => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {errorUser\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}